# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
defaults: &defaults
  docker:
    - image: node:8.4
  working_directory: /workspace/elm-express-boilerplate

elm: &elm
  - restore_cache:
      keys:
        - v10-bundle-yarn
  - run: yarn global add elm
  - run: mv $(npm config get prefix)/bin/elm-make $(npm config get prefix)/bin/elm-make-old
  - run: printf "#\041/bin/bash\n\necho \"Running elm-make with sysconfcpus -n 2\"\n\n/workspace/sysconfcpus/bin/sysconfcpus -n 2 elm-make-old \"\$@\"" > $(npm config get prefix)/bin/elm-make
  - run: chmod +x $(npm config get prefix)/bin/elm-make

version: 2
jobs:
  clone:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: /workspace
          paths:
            - elm-express-boilerplate

  dependencies:
      <<: *defaults
      steps:
        <<: *elm
        - attach_workspace:
            at: /workspace
        - restore_cache:
            keys:
              - v10-bundle-{{ checksum "package.json" }}
              - v10-bundle-{{ checksum "elm-package.json" }}
              - v10-bundle-{{ checksum "tests/elm-package.json" }}
        - run: npm install
        - run: npm run snyk:t
        - run: elm-package install --yes && cd tests && elm-package install --yes
        - save_cache:
            key: v10-bundle-{{ checksum "package.json" }}
            paths:
              - node_modules
        - save_cache:
            key: v10-bundle-yarn
            paths:
              - ~/.yarn_cache
        - persist_to_workspace:
            root: /workspace
            paths:
              - elm-express-boilerplate/node_modules
              - elm-express-boilerplate/elm-stuff
              - elm-express-boilerplate/tests/elm-stuff
  
  hack:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - v10-bundle-hack
      - run: |
            if [ ! -d /workspace/sysconfcpus/bin ];
            then
              git clone https://github.com/obmarg/libsysconfcpus.git; 
              cd libsysconfcpus;
              ./configure --prefix=/workspace/sysconfcpus;
              make && make install;
              cd ..;
            fi
      - save_cache:
          key: v10-bundle-hack
          paths:
            - /workspace/sysconfcpus
      - persist_to_workspace:
          root: /workspace
          paths:
            - sysconfcpus

  elm-build:
    <<: *defaults
    steps:
      <<: *elm
      - attach_workspace:
          at: /workspace
      - run: cat $(npm config get prefix)/bin/elm-make
      - run: elm-make --yes
      - run: cd tests && elm-make --yes
      - persist_to_workspace:
          root: /workspace
          paths:
            - elm-express-boilerplate/elm-stuff/build-artifacts
            - elm-express-boilerplate/tests/elm-stuff/build-artifacts
      - save_cache:
          key: v10-bundle-{{ checksum "elm-package.json" }}
          paths:
            - elm-stuff
      - save_cache:
          key: v10-bundle-{{ checksum "tests/elm-package.json" }}
          paths:
            - tests/elm-stuff

  build:
    <<: *defaults
    steps:
      <<: *elm
      - attach_workspace:
          at: /workspace
      - run: npm run build

  test:
    <<: *defaults
    steps:
      <<: *elm
      - attach_workspace:
          at: /workspace
      - run: npm test
      - run:
          command: npm test
          when: on_fail
          no_output_timeout: 20m
      - run: npm run snyk:m

  heroku_deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /workspace
      - run: bash .circleci/setup-heroku.bash
      - add_ssh_keys:
          fingerprints:
            - "7c:77:d2:07:31:3f:64:89:ff:77:cb:97:25:89:97:07"
      - deploy:
          name: Deploy master to Heroku
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              git push heroku master
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - clone
      - hack
      - dependencies:
          requires:
            - clone
      - build:
          requires:
            - hack
            - dependencies
      - test:
          requires:
            - hack
            - dependencies
      - heroku_deploy:
          requires:
            - build
            - test